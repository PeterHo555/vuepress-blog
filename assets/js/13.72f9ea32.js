(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{420:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_10-2-spring-boot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-spring-boot"}},[t._v("#")]),t._v(" 10.2 Spring Boot")]),t._v(" "),a("h3",{attrs:{id:"什么是springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是springboot"}},[t._v("#")]),t._v(" 什么是SpringBoot？")]),t._v(" "),a("p",[t._v("Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。")]),t._v(" "),a("ul",[a("li",[t._v("用来简化Spring应用的初始搭建以及开发过程，使用特定的方式来进行配置")]),t._v(" "),a("li",[t._v("创建独立的Spring引用程序main方法运行")]),t._v(" "),a("li",[t._v("嵌入的tomcat无需部署war文件")]),t._v(" "),a("li",[t._v("简化maven配置")]),t._v(" "),a("li",[t._v("自动配置Spring添加对应的功能starter自动化配置")]),t._v(" "),a("li",[t._v("SpringBoot来简化Spring应用开发，约定大于配置，去繁化简")])]),t._v(" "),a("h3",{attrs:{id:"为什么使用springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用springboot"}},[t._v("#")]),t._v(" 为什么使用SpringBoot？")]),t._v(" "),a("ul",[a("li",[t._v("独立运行")])]),t._v(" "),a("p",[t._v("Spring Boot 而且内嵌了各种 servlet 容器，Tomcat、Jetty 等，现在不再需要打成war 包部署到容器中，Spring Boot 只要打成一个可执行的 jar 包就能独立运行，所有的依赖包都在一个 jar 包内。")]),t._v(" "),a("ul",[a("li",[t._v("简化配置")])]),t._v(" "),a("p",[t._v("spring-boot-starter-web 启动器自动依赖其他组件，简少了 maven 的配置。")]),t._v(" "),a("ul",[a("li",[t._v("自动配置")])]),t._v(" "),a("p",[t._v("Spring Boot 能根据当前类路径下的类、jar 包来自动配置 bean，如添加一个 spring")]),t._v(" "),a("p",[t._v("boot-starter-web 启动器就能拥有 web 的功能，无需其他配置。")]),t._v(" "),a("ul",[a("li",[t._v("无代码生成和XML配置")])]),t._v(" "),a("p",[t._v("Spring Boot 配置过程中无代码生成，也无需 XML 配置文件就能完成所有配置工作，这一切都是借助于条件注解完成的，这也是 Spring4.x 的核心功能之一。")]),t._v(" "),a("ul",[a("li",[t._v("应用监控")])]),t._v(" "),a("p",[t._v("Spring Boot 提供一系列端点可以监控服务及应用，做健康检测。")]),t._v(" "),a("h3",{attrs:{id:"spring、spring-mvc和springboot有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring、spring-mvc和springboot有什么区别"}},[t._v("#")]),t._v(" Spring、Spring MVC和SpringBoot有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("Spring")])]),t._v(" "),a("p",[t._v("Spring最重要的特征是依赖注入。所有Spring Modules不是依赖注入就是IOC控制反转。")]),t._v(" "),a("p",[t._v("当我们恰当的使用DI或者是IOC的时候，可以开发松耦合应用。")]),t._v(" "),a("ul",[a("li",[t._v("Spring MVC")])]),t._v(" "),a("p",[t._v("Spring MVC提供了一种分离式的方法来开发Web应用。通过运用像DispatcherServelet，ModelAndView 和 ViewResolver 等一些简单的概念，开发 Web 应用将会变的非常简单。")]),t._v(" "),a("ul",[a("li",[t._v("SpringBoot")])]),t._v(" "),a("p",[t._v("Spring和Spring MVC的问题在于需要配置大量的参数。")]),t._v(" "),a("p",[t._v("SpringBoot通过一个自动配置和启动的项来解决这个问题。")]),t._v(" "),a("h3",{attrs:{id:"springboot自动配置的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot自动配置的原理"}},[t._v("#")]),t._v(" SpringBoot自动配置的原理?")]),t._v(" "),a("p",[t._v("在Spring程序main方法中，添加@SpringBootApplication或者@EnableAutoConfiguration会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建的Spring容器中的bean")]),t._v(" "),a("h3",{attrs:{id:"spring-boot的核心注解是哪些-他主由哪几个注解组成的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot的核心注解是哪些-他主由哪几个注解组成的"}},[t._v("#")]),t._v(" Spring Boot的核心注解是哪些？他主由哪几个注解组成的？")]),t._v(" "),a("p",[t._v("启动类上面的注解是@SpringBootApplication，他也是SpringBoot的核心注解，主要组合包含了以下3个注解：")]),t._v(" "),a("ul",[a("li",[t._v("@SpringBootConfiguration：组合了@Configuration注解，实现配置文件的功能；")]),t._v(" "),a("li",[t._v("@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置的功能：")]),t._v(" "),a("li",[t._v("@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})；")]),t._v(" "),a("li",[t._v("@ComponentScan：Spring组件扫描。")])]),t._v(" "),a("h3",{attrs:{id:"springboot的核心配置文件有哪几个-他们的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot的核心配置文件有哪几个-他们的区别是什么"}},[t._v("#")]),t._v(" SpringBoot的核心配置文件有哪几个？他们的区别是什么？")]),t._v(" "),a("p",[t._v("SpringBoot的核心配置文件是application和bootstrap配置文件。")]),t._v(" "),a("p",[t._v("application配置文件这个容易理解，主要用于Spring Boot项目的自动化配置。")]),t._v(" "),a("p",[t._v("bootstrap配置文件有以下几个应用场景：")]),t._v(" "),a("ul",[a("li",[t._v("使用Spring Cloud Config配置中心时，这时需要在bootstrap配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；")]),t._v(" "),a("li",[t._v("一些固定的不能被覆盖的属性；")]),t._v(" "),a("li",[t._v("一些加密/解密的场景；")])]),t._v(" "),a("h3",{attrs:{id:"什么是spring-boot-starter-有哪些常用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring-boot-starter-有哪些常用的"}},[t._v("#")]),t._v(" 什么是Spring Boot Starter？有哪些常用的？")]),t._v(" "),a("p",[t._v("和自动配置一样，Spring Boot Starter的目的也是简化配置，而Spring Boot Starter解决的是依赖管理配置复杂的问题，有了它，当我需要构建一个Web应用程序时，不必再遍历所有的依赖包，一个一个地添加到项目的依赖管理中，而是只需要一个配置spring-boot-starter-web, 同理，如果想引入持久化功能，可以配置spring-boot-starter-data-jpa：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-web"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("Spring Boot 也提供了其它的启动器项目包括，包括用于开发特定类型应用程序的典型依赖项。")]),t._v(" "),a("p",[t._v("spring-boot-starter-web-services - SOAP Web Services")]),t._v(" "),a("p",[t._v("spring-boot-starter-web - Web 和 RESTful 应用程序")]),t._v(" "),a("p",[t._v("spring-boot-starter-test - 单元测试和集成测试")]),t._v(" "),a("p",[t._v("spring-boot-starter-jdbc - 传统的 JDBC")]),t._v(" "),a("p",[t._v("spring-boot-starter-hateoas - 为服务添加 HATEOAS 功能")]),t._v(" "),a("p",[t._v("spring-boot-starter-security - 使用 SpringSecurity 进行身份验证和授权")]),t._v(" "),a("p",[t._v("spring-boot-starter-data-jpa - 带有 Hibernate 的 Spring Data JPA")]),t._v(" "),a("p",[t._v("spring-boot-starter-data-rest - 使用 Spring Data REST 公布简单的 REST 服务")]),t._v(" "),a("h3",{attrs:{id:"spring-boot-starter-parent有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-starter-parent有什么作用"}},[t._v("#")]),t._v(" spring-boot-starter-parent有什么作用？")]),t._v(" "),a("p",[t._v("我们知道，新建一个SpringBoot项目，默认都是有parent的，这个parent就是spring-boot-starter-parent，spring-boot-starter-parent主要有如下作用：")]),t._v(" "),a("ul",[a("li",[t._v("定义了Java编译版本")]),t._v(" "),a("li",[t._v("使用UTF-8格式编码")]),t._v(" "),a("li",[t._v("继承自spring-boor-dependencies，这里面定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号")]),t._v(" "),a("li",[t._v("执行打包操作的配置")]),t._v(" "),a("li",[t._v("自动化的资源过滤")]),t._v(" "),a("li",[t._v("自动化的插件配置")])]),t._v(" "),a("h3",{attrs:{id:"如何自定义spring-boot-starter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何自定义spring-boot-starter"}},[t._v("#")]),t._v(" 如何自定义Spring Boot Starter？")]),t._v(" "),a("ul",[a("li",[t._v("实现功能")]),t._v(" "),a("li",[t._v("添加Properties")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ConfigurationProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.pdai"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoProperties")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("添加AutoConfiguration")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableConfigurationProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoAutoConfiguration")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pdai"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("DemoModule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demoModule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoProperties")]),t._v(" properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pdai"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("DemoModule")]),t._v(" demoModule "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pdai"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("DemoModule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        demoModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        demoModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" demoModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("添加spring.factory")])]),t._v(" "),a("p",[t._v("在META-INF下创建spring.factory文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\ncom.pdai.demospringbootstarter.DemoAutoConfiguration\n")])])]),a("ul",[a("li",[t._v("install")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://pdai.tech/images/spring/springboot-starter-demo-2.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"为什么需要spring-boot-maven-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要spring-boot-maven-plugin"}},[t._v("#")]),t._v(" 为什么需要spring-boot-maven-plugin？")]),t._v(" "),a("p",[t._v("spring-boot-maven-plugin提供了一些像jar一样打包或者运行应用程序的命令。")]),t._v(" "),a("ol",[a("li",[t._v("spring-boot:run 运行SpringBoot应用程序；")]),t._v(" "),a("li",[t._v("spring-boot:repackage 重新打包你的jar包或者是war包使其可执行")]),t._v(" "),a("li",[t._v("spring-boot:start和spring-boot:stop管理Spring Boot应用程序的生命周期")]),t._v(" "),a("li",[t._v("spring-boot:build-info生成执行器可以使用的构造信息")])]),t._v(" "),a("h3",{attrs:{id:"springboot-打成jar和普通的jar有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot-打成jar和普通的jar有什么区别"}},[t._v("#")]),t._v(" SpringBoot 打成jar和普通的jar有什么区别？")]),t._v(" "),a("p",[t._v("Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过java -jar xxx.jar命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。")]),t._v(" "),a("p",[t._v("Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \\BOOT-INF\\classes目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。")]),t._v(" "),a("h3",{attrs:{id:"如何使用spring-boot实现异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用spring-boot实现异常处理"}},[t._v("#")]),t._v(" 如何使用Spring Boot实现异常处理？")]),t._v(" "),a("p",[t._v("Spring提供了一种使用ControllerAdvice处理异常的非常有用的方法。通过实现一个ControlerAdvice类，来处理控制类抛出的所有异常。")]),t._v(" "),a("h3",{attrs:{id:"springboot-实现热部署有哪几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot-实现热部署有哪几种方式"}},[t._v("#")]),t._v(" SpringBoot 实现热部署有哪几种方式？")]),t._v(" "),a("p",[t._v("主要有两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("Spring Loaded")]),t._v(" "),a("li",[t._v("Spring-boot-devtools")])]),t._v(" "),a("h3",{attrs:{id:"spring-boot中的监视器是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot中的监视器是什么"}},[t._v("#")]),t._v(" Spring Boot中的监视器是什么？")]),t._v(" "),a("p",[t._v("Spring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。")]),t._v(" "),a("p",[t._v("有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为HTTP URL访问的REST端点来检查状态。")]),t._v(" "),a("h3",{attrs:{id:"pring-boot-可以兼容老-spring-项目吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pring-boot-可以兼容老-spring-项目吗"}},[t._v("#")]),t._v(" pring Boot 可以兼容老 Spring 项目吗？")]),t._v(" "),a("p",[t._v("可以兼容，使用 @ImportResource 注解导入老 Spring 项目配置文件。")])])}),[],!1,null,null,null);a.default=r.exports}}]);